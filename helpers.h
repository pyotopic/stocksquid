#ifndef HELPERS_H
#define HELPERS_H

#include <map>
#include <vector>
#include <string>
#include "Move.h"

using namespace std;

const int mailbox[120] = {
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1,  0,  1,  2,  3,  4,  5,  6,  7, -1,
    -1,  8,  9, 10, 11, 12, 13, 14, 15, -1,
    -1, 16, 17, 18, 19, 20, 21, 22, 23, -1,
    -1, 24, 25, 26, 27, 28, 29, 30, 31, -1,
    -1, 32, 33, 34, 35, 36, 37, 38, 39, -1,
    -1, 40, 41, 42, 43, 44, 45, 46, 47, -1,
    -1, 48, 49, 50, 51, 52, 53, 54, 55, -1,
    -1, 56, 57, 58, 59, 60, 61, 62, 63, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
};

const int mailboxes[64] = {
    21, 22, 23, 24, 25, 26, 27, 28,
    31, 32, 33, 34, 35, 36, 37, 38,
    41, 42, 43, 44, 45, 46, 47, 48,
    51, 52, 53, 54, 55, 56, 57, 58,
    61, 62, 63, 64, 65, 66, 67, 68,
    71, 72, 73, 74, 75, 76, 77, 78,
    81, 82, 83, 84, 85, 86, 87, 88,
    91, 92, 93, 94, 95, 96, 97, 98
};


const bool slide[6] = {false, false, true, true, true, false};
extern int offsets[6]; /* knight or ray directions */
extern int offset[6][8];

const int bigScore = 100000;
const int negativeInfinity = -1000000;
const int positiveInfinity =  1000000;


inline map<Piece,int> setPieceValues(){
    map<Piece,int> pieceMap;
    pieceMap[wpawn] = 100;
    pieceMap[bpawn] = -100;
    pieceMap[wknight] = 300;
    pieceMap[bknight] = -300;
    pieceMap[wbishop] = 300;
    pieceMap[bbishop] = -300;
    pieceMap[wrook] = 500;
    pieceMap[brook] = -500;
    pieceMap[wqueen] = 900;
    pieceMap[bqueen] = -900;
    pieceMap[wking] = 10000;
    pieceMap[bking] = -10000;

    return pieceMap;
}


inline map<Piece,vector<int>> setValueDifferentials(){
    map<Piece,vector<int>> scoreMaps;

    scoreMaps[wpawn] = {
        0,0,0,0,0,0,0,0,
        5,5,5,5,5,5,5,5,
        3,3,4,4,4,4,3,3,
        2,2,3,3,3,3,2,2,
        1,1,2,2,2,2,1,1,
        1,1,1,0,0,1,1,1,
        0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0
    };

    scoreMaps[bpawn] = {
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
        -1, -1, -1, -0, -0, -1, -1, -1,
        -1, -1, -2, -2, -2, -2, -1, -1,
        -2, -2, -3, -3, -3, -3, -2, -2,
        -3, -3, -4, -4, -4, -4, -3, -3,
        -5, -5, -5, -5, -5, -5, -5, -5,
        0 , 0 , 0 , 0 , 0 , 0 , 0 ,  0
    };

    scoreMaps[wknight] = {
        -1,0,0,0,0,0,0,-1,
        1,1,1,1,1,1,1,1,
        1,3,4,4,4,4,3,1,
        0,1,3,3,3,3,1,0,
        -1,0,2,2,2,2,0,-1,
        -1,0,1,1,1,1,0,-1,
        -1,-1,0,0,0,0,-1,-1,
        -3,-2,-2,-2,-2,-2,-2,-3
    };

    scoreMaps[bknight] = {
        3,2,2,2,2,2,2,3,
        1,1,0,0,0,0,1,1,
        1,0,-1,-1,-1,-1,1,0,
        1,0,-2,-2,-2,-2,0,1,
        0,-1,-3,-3,-3,-3,-1,0,
        -1,-3,-4,-4,-4,-4,-3,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,
        1,0,0,0,0,0,0,1
    };

    scoreMaps[wbishop] = {
        2, 2, 2, 2, 2, 2, 2, 2,
        1, 2, 2, 2, 2, 2, 2, 1,
        0, 2, 2, 2, 2, 2, 2, 0,
        -1, 1, 2, 2, 2, 2, 1, -1,
        -2, 0, 2, 2, 2, 2, 0, -2,
        -1, -1, 1, 1, 1, 1, -1, -1,
        0, 1, -1, 1, 1, -1, 1, 0,
        -3, -3, -3, -3, -3, -3, -3, -3
    };

    scoreMaps[bbishop] = {
        3, 3, 3, 3, 3, 3, 3, 3,
        0, -1, 1, -1, -1, 1, -1, 0,
        1, 1, -1, -1, -1, -1, 1, 1,
        2, 0, -2, -2, -2, -2, 0, 2,
        1, -1, -2, -2, -2, -2, -1, 1,
        0, -2, -2, -2, -2, -2, -2, 0,
        -1, -2, -2, -2, -2, -2, -2, -1,
        -2, -2, -2, -2, -2, -2, -2, -2
    };

    scoreMaps[wrook] = {
        2, 2, 2, 2, 2, 2, 2, 2,
        3, 3, 3, 3, 3, 3, 3, 3,
        2, 2, 2, 2, 2, 2, 2, 2,
        1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0,
        -1, -1, -1, -1, -1, -1, -1, -1,
        -2, -2, -2, -2, -2, -2, -2, -2,
        -3, -3, -3, -3, -3, -3, -3, -3
    };

    scoreMaps[brook] = {
        3, 3, 3, 3, 3, 3, 3, 3,
        2, 2, 2, 2, 2, 2, 2, 2,
        1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0,
        -1, -1, -1, -1, -1, -1, -1, -1,
        -2, -2, -2, -2, -2, -2, -2, -2,
        -3, -3, -3, -3, -3, -3, -3, -3,
        -2, -2, -2, -2, -2, -2, -2, -2
    };

    scoreMaps[wqueen] = {
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
    };

    scoreMaps[bqueen] = {
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,
    };

    scoreMaps[wking] = {
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2,
        1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        1, 2, 1, 0, 0, 0, 2, 1
    };

    scoreMaps[bking] = {
        -1, -2, -1, 0, 0, 0, -2, -1,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        -1, -1, -1, -1, -1, -1, -1, -1,
        -2, -2, -2, -2, -2, -2, -2, -2,
        -2, -2, -2, -2, -2, -2, -2, -2,
        -2, -2, -2, -2, -2, -2, -2, -2
    };

    return scoreMaps;
}


extern map<Piece,vector<int>> valueDifferentials;
extern map<Piece,int> pieceValues;


Piece getCodeFor(char c);
char getCharFor(Piece piece);
Move unflatten(unsigned int flat);
bool onBoard(int x);
bool colour(Piece piece);
vector<int> flattenList(vector<Move> mlist);
string printLine();
int getIndexOfSquare(string a);
string getCoordinatesOfSquare(int n);
#endif